"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
ALLOWED_HOSTS = ['127.0.0.1']
DOMAIN_NAME = 'http://127.0.0.1:8000'

ADMINS = [
    ("Super Man", 'mr88@mail.ru'),
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_extensions',
    'django.contrib.humanize',
    "debug_toolbar",
    'user.apps.UserConfig',
    'products.apps.ProductsConfig',
    'orders.apps.OrdersConfig',
    'rest_framework',
    'api.apps.ApiConfig',
    'rest_framework.authtoken',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'products.context_processors.basket',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv('NAME_DB'),
        'USER': os.getenv('USER_DB'),
        'PASSWORD': os.getenv('PASSWORD_DB'),
        'HOST': os.getenv('HOST_DB'),
        'PORT': os.getenv('PORT_DB'), 
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'store_db',
#         'USER': 'store_username',
#         'PASSWORD': 'Hjvfy160388!',
#         'HOST': 'localhost',
#         'PORT': '5432', 
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Redis
REDIS_HOST = '127.0.0.1'
REDIS_PORT = '6379'


# Cache
CACHES = {
    "default": {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{REDIS_HOST}:{REDIS_PORT}/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'

if DEBUG:
    STATICFILES_DIRS = [BASE_DIR / 'static',]
else:
    STATIC_ROOT = BASE_DIR / 'static'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media') 
MEDIA_URL = '/media/' 


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Переопределение модели User
AUTH_USER_MODEL = 'user.User'   
LOGIN_URL = '/user/login/'
LOGIN_REDIRECT_URL = "/"


#sending email

EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')


SERVER_EMAIL = os.getenv('EMAIL_HOST_USER')
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER')


# OAuth

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'SCOPE': [
            'user',
            'repo',
            'read:org',
        ],
    }
}

# toolbar
INTERNAL_IPS = [
    "127.0.0.1",
]

#Celery
CELERY_BROKER_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST}:{REDIS_PORT}'

# stripe
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET')


#REST

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 2,

    'DEFAULT_AUTHENTICATION_CLASSES': [
    'rest_framework.authentication.TokenAuthentication',]
}

#LOGGING

LOGGING = {
    'version': 1,

    'formatters': {
        'main_format':{
            "format": "{asctime} - {levelname} - {module} - {filename} - {message}",
            "style": "{",
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': "simple"},
        # 'file': {
        #     "class": 'logging.FileHandler',
        #     "formatter": "main_formatter",
        #     "filename": 'logging/info.log'
        # },
        'file_server': {
            "class": 'logging.FileHandler',
            "formatter": "main_format",
            "filename": 'logging/info_server.log'
        },
        'file_template': {
            "class": 'logging.FileHandler',
            "formatter": "main_format",
            "filename": 'logging/info_template.log'
        },
        'file_request': {
            "class": 'logging.FileHandler',
            "formatter": "main_format",
            "filename": 'logging/info_request.log'
        },
        'file_django': {
            "class": 'logging.FileHandler',
            "formatter": "main_format",
            "filename": 'logging/info_django.log'
        },
        'file_main': {
            "class": 'logging.FileHandler',
            "formatter": "main_format",
            "filename": 'logging/info_main.log'
        },
        'file_security': {
            "class": 'logging.FileHandler',
            "formatter": "main_format",
            "filename": 'logging/info_security.log'
        },
        'mail_admins': {
            'level': 'INFO',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            # 'email_backend': 'django.core.mail.backends.filebased.EmailBackend',
        },
        # 'logstash': {
        # 'level': 'WARNING',
        # 'class': 'logstash.TCPLogstashHandler',
        # 'host': 'localhost',
        # 'port': 5959, # Default value: 5959
        # 'version': 1, # Version of logstash event schema. Default value: 0 (for backward compatibility of the library)
        # 'message_type': 'django',  # 'type' field in logstash message. Default value: 'logstash'.
        # 'fqdn': False, # Fully qualified domain name. Default value: false.
        # 'tags': ['django.request'], # list of tags. Default: None.
        # },
    },

    'loggers': {
    #Display in console all raw sql requests
    #     'django.db.backends': {
        #     'handlers': ['console'],
        #     'level': 'DEBUG'},
        'django': {
            'handlers': ['file_django', 'console'],
            'level': 'WARNING',
            'propagate': True,},

        'django.request': {
            'handlers': ['file_request'],
            'level': 'WARNING',
            'propagate': True,},

        'django.template': {
            'handlers': ['file_template'],
            'level': 'WARNING',
            'propagate': True,},
         
        'django.server': {
            'handlers': ['file_server'],
            'level': 'INFO',
            'propagate': True,},

        'django.security': {
            'handlers': ['file_security'],
            'level': 'INFO',
            'propagate': True,
        },
        # It's a custom logger logger = logging.getLogger('main')
        'main': {
            'handlers': ['file_main', 'mail_admins'],
            'level': 'DEBUG',
            'propagate': False,}
        }
    }
        